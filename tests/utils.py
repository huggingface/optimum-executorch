# Copyright 2025 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import gc
import logging
import math
from typing import Any, List

import torch
from transformers import AutoModelForCausalLM, AutoModelForPreTraining, AutoProcessor

from optimum.exporters.executorch.utils import apply_chat_template_with_fallback


def check_causal_lm_output_quality(
    model_id: str, generated_tokens: torch.Tensor, max_perplexity_threshold: float = 100.0
):
    """
    Evaluates the quality of text generated by a causal language model by calculating its perplexity.

    Args:
        model_id: HuggingFace model identifier (e.g., "google/gemma2-2b")
        generated_tokens: The tokens generated by the exported model to evaluate
        max_perplexity_threshold: Maximum acceptable perplexity (lower is better)

    Returns:
        tuple: (is_quality_ok, reason) with boolean result and explanation
    """
    logging.info(f"Starting perplexity check with model '{model_id}' ...")
    # Load model
    model = AutoModelForCausalLM.from_pretrained(
        model_id,
        low_cpu_mem_usage=True,
        use_cache=False,
        torch_dtype=torch.bfloat16,
    )

    with torch.no_grad():
        outputs = model(input_ids=generated_tokens, labels=generated_tokens)

    # Get the loss (negative log-likelihood)
    loss = outputs.loss.item()

    # Calculate perplexity (exp of the average negative log-likelihood)
    perplexity = math.exp(loss)

    is_quality_ok = perplexity <= max_perplexity_threshold
    if is_quality_ok:
        logging.info(f"✓ Perplexity check passed: {perplexity:.2f} <= {max_perplexity_threshold}")
    else:
        logging.warning(f"✗ Perplexity check failed: {perplexity:.2f} > {max_perplexity_threshold}")

    # Clean up immediately
    del model
    del outputs
    gc.collect()

    return is_quality_ok


def check_multimodal_output_quality(
    model_id: str, generated_tokens: torch.Tensor, conversation: List[Any], max_perplexity_threshold: float = 100.0
):
    """
    Evaluates the quality of text generated by a multimodal text-to-text model by calculating its perplexity.

    Args:
        model_id: HuggingFace model identifier (e.g., "mistralai/Voxtral-Mini-3B-2507")
        generated_tokens: The tokens generated by the exported model to evaluate
        conversation: The multimodal conversation input used for generation
        max_perplexity_threshold: Maximum acceptable perplexity (lower is better)

    Returns:
        bool: True if quality is acceptable, False otherwise
    """
    logging.info(f"Starting perplexity check with multimodal model '{model_id}' ...")

    # Load model and processor
    processor = AutoProcessor.from_pretrained(model_id)
    # See note around https://github.com/huggingface/optimum-executorch/blob/main/optimum/exporters/executorch/tasks/multimodal_text_to_text.py#L162 about why AutoModelForPreTraining is used.
    model = AutoModelForPreTraining.from_pretrained(
        model_id,
        low_cpu_mem_usage=True,
        torch_dtype=torch.bfloat16,
    )

    # Process the conversation to get inputs
    inputs = apply_chat_template_with_fallback(
        processor,
        conversation,
        add_generation_prompt=True,
        tokenize=True,
        return_dict=True,
        return_tensors="pt",
    )
    inputs = {k: v.to(model.device) if hasattr(v, "to") else v for k, v in inputs.items()}
    generated_tokens = generated_tokens.to(model.device)

    # Create verification input for one forward pass by concatenating input and generated tokens
    if "input_ids" in inputs:
        full_sequence = torch.cat([inputs["input_ids"], generated_tokens], dim=1)
        labels = full_sequence.clone()
        # Mask the input portion (don't compute loss on input, only on generated part)
        # -100 is the default ignored index, see: https://docs.pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html
        labels[:, : inputs["input_ids"].shape[1]] = -100

        with torch.no_grad():
            forward_inputs = {}
            if "input_features" in inputs:
                forward_inputs["input_features"] = inputs["input_features"]
            if "pixel_values" in inputs:
                forward_inputs["pixel_values"] = inputs["pixel_values"]
            forward_inputs["input_ids"] = full_sequence
            forward_inputs["labels"] = labels
            outputs = model(**forward_inputs)
    else:
        raise ValueError(f"Unable to find `input_ids` after parsing conversation {conversation}")

    # Get the loss (negative log-likelihood)
    loss = outputs.loss.item()

    # Calculate perplexity (exp of the average negative log-likelihood)
    perplexity = math.exp(loss)

    is_quality_ok = perplexity <= max_perplexity_threshold
    if is_quality_ok:
        logging.info(f"✓ Perplexity check passed: {perplexity:.2f} <= {max_perplexity_threshold}")
    else:
        logging.warning(f"✗ Perplexity check failed: {perplexity:.2f} > {max_perplexity_threshold}")

    # Clean up immediately
    del model
    del processor
    del outputs
    gc.collect()

    return is_quality_ok


def check_close_recursively(eager_outputs, exported_outputs, atol=1e-4, rtol=1e-4):
    is_close = False
    if isinstance(eager_outputs, torch.Tensor):
        torch.testing.assert_close(eager_outputs, exported_outputs, atol=atol, rtol=rtol)
        return True
    elif isinstance(eager_outputs, (tuple, list)):
        for eager_output, exported_output in zip(eager_outputs, exported_outputs):
            is_close = is_close or check_close_recursively(eager_output, exported_output)
        return is_close
    elif isinstance(eager_outputs, dict):
        for key in eager_outputs:
            is_close = is_close or check_close_recursively(eager_outputs[key], exported_outputs[key])
        return is_close
    return is_close
